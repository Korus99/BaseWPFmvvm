<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    mc:Ignorable="d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="BrushDictionary.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="Button" x:Key="DefaultButtonStyle">
        <Setter Property="Background" Value="#FFF" />
        <Setter Property="Foreground" Value="#333" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="BorderBrush" Value="#CCC" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.4" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.3" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="NoButtonStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#333" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.2" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.4" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.3" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="PrimaryButtonStyle">
        <Setter Property="Background" Value="{StaticResource PrimaryButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource PrimaryButtonForegroundBrush}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{StaticResource NormalButtonFontSize}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.1" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="SecondaryButtonStyle">
        <Setter Property="Background" Value="{StaticResource SecondaryButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource SecondaryButtonForegroundBrush}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{StaticResource NormalButtonFontSize}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AppTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FontSize" Value="{StaticResource FormTextFontSize}" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" Padding="2"
                                CornerRadius="2">

                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"
                                          Style="{DynamicResource SimpleScrollViewer}"
                                          Background="{TemplateBinding Background}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"
                                    TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}"
                                    TargetName="Border" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DefaultBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource DefaultBorderBorderBrush}" />
        <Setter Property="Background" Value="{StaticResource DefaultBorderBackgroundBrush}" />
    </Style>
    <Style x:Key="HeaderBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{StaticResource HeaderBorderBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBorderBrush}" />
    </Style>
    <Style x:Key="ReadOnlyBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource ReadOnlyBorderBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource ReadOnlyBorderBorderBrush}" />
    </Style>

    <Style x:Key="ReadOnlyTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{StaticResource FormTextFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource DarkBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="4,3,4,1" />
        <Setter Property="IsEnabled" Value="False" />
    </Style>
    <Style x:Key="EditTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{StaticResource FormTextFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource DarkBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="4,3,4,1" />
        <Setter Property="IsEnabled" Value="True" />
    </Style>
    <Style x:Key="EditTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="{StaticResource FormTextFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource DarkBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="4,3,4,1" />
        <Setter Property="IsEnabled" Value="True" />
    </Style>
    <Style x:Key="FormLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="2,0,0,0" />
        <Setter Property="Foreground" Value="{StaticResource DarkBrush}" />
        <Setter Property="FontSize" Value="{StaticResource FormTextFontSize}" />
    </Style>
    <Style x:Key="HeaderLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource ErtHeaderDarkBrush}" />
        <Setter Property="FontSize" Value="{StaticResource FormHeaderFontSize}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="SubHeaderLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource ErtHeaderDarkBrush}" />
        <Setter Property="FontSize" Value="{StaticResource FormHeaderFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <!-- Simple ComboBox Toggle Button - This is used in ComboBox to expand and collapse the ComboBox Popup-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="2"
                       HorizontalAlignment="Stretch"
                       x:Name="Rectangle"
                       VerticalAlignment="Stretch"
                       Width="Auto"
                       Height="Auto"
                       RadiusX="5"
                       RadiusY="5"
                       Fill="{DynamicResource NormalGradientBrush}"
                       Stroke="{DynamicResource NormalBorderGradientBrush}" />
            <Rectangle Grid.Column="0"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Stretch"
                       Width="Auto"
                       Height="Auto"
                       RadiusX="5"
                       RadiusY="5"
                       Fill="{DynamicResource WindowBackgroundBrush}"
                       Stroke="{DynamicResource NormalBorderGradientBrush}" />
            <Path Grid.Column="1"
                  HorizontalAlignment="Center"
                  x:Name="Arrow"
                  VerticalAlignment="Center"
                  Fill="{DynamicResource GlyphBrush}"
                  Data="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource MouseOverGradientBrush}" TargetName="Rectangle" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Fill" Value="{DynamicResource PressedGradientBrush}" TargetName="Rectangle" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle" />
                <Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- This is the area which contains the selected item in the ComboBox -->
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>


    <Style x:Key="AppComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FontSize" Value="{StaticResource FormTextFontSize}" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton Template="{DynamicResource ComboBoxToggleButton}"
                                      x:Name="ToggleButton" Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press" />
                        <ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite"
                                          VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}"
                                 HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox"
                                 Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />

                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup"
                               Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}"
                                        BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                                <ScrollViewer Margin="4,6,4,6" Style="{DynamicResource SimpleScrollViewer}"
                                              SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto"
                                              VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />

                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder" />
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox" />
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ComboBoxItem - This is used for each item inside of the ComboBox. You can change the selected color of each item below-->
    <Style x:Key="AppComboBoxItem" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- Change IsHighlighted SelectedBackgroundBrush to set the selection color for the items -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"
                                    TargetName="Border" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AppLabel" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{StaticResource FormTextFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid Background="{StaticResource OffWhiteBrush}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>